#pragma once

#include <cstdint>

namespace IOE
{
namespace Exceptions
{
	enum class EExceptionID : std::uint16_t
	{
		// Generic errors
		E_ERROR_UNKNOWN = 0x000,
		E_ERROR_INVALID_INDEX,
		E_ERROR_INVALID_KEY,
		E_ERROR_INVALID_OPTIONS,
		E_ERROR_MANAGER_NOT_CREATED,
		E_ERROR_INVALID_ASSET_STRUCTURE,
		E_ERROR_EXTERNAL_ERROR,

		// Conversion / IO errors
		E_ERROR_CONVERSION_UNKNOWN = 0x1000,
		E_ERROR_NO_TYPE_IN_STRING,
		E_ERROR_STATIC_CAST_FAILED,
		E_ERROR_DYNAMIC_CAST_FAILED,
		E_ERROR_REINTERPRET_CAST_FAILED,
		E_ERROR_CONVERSION_MAX,

		// Type errors
		E_ERROR_TYPE_UNKNOWN = 0x2000,
		E_ERROR_TYPE_MAX,

		// Network Errors
		E_ERROR_NET_UNKNOWN = 0x3000,
		E_ERROR_NET_MAX,

		// Memory errors
		E_ERROR_MEMORY_UNKNOWN = 0x4000,
		E_ERROR_OUT_OF_MEMORY,
		E_ERROR_REQUEST_TOO_LARGE,
		E_ERROR_UNKNOWN_TYPE,
		E_ERROR_MEMORY_MAX,

		// Renderer errors
		E_ERROR_RENDERER_UNKNOWN = 0x5000,
		E_ERROR_FAILED_TO_CREATE_DEVICE,
		E_ERROR_FAILED_TO_CREATE_DEVICE_CONTEXT,
		E_ERROR_FAILED_TO_CREATE_VIEWPORT,
		E_ERROR_FAILED_TO_CREATE_RENDER_TARGET,
		E_ERROR_INVALID_HARDWARE,
		E_ERROR_FAILED_TO_READ_ASSET,
		E_ERROR_FAILED_TO_READ_MATERIAL,
		E_ERROR_FAILED_TO_COMPILE_SHADER,
		E_ERROR_FAILED_TO_FIND_VARIABLES,
		E_ERROR_FAILED_TO_LOAD_MODEL,
		E_ERROR_FAILED_TO_LOAD_TEXTURE,
		E_ERROR_RENDERER_MAX,

		E_ERROR_MAX

	};
} // namespace Exceptions
} // namespace IOE