#pragma once

//////////////////////////////////////////////////////////////////////////

#include <vector>
#include <string>
#include <map>

#include <IOE/IOECore/IOEDefines.h>

//////////////////////////////////////////////////////////////////////////

using std::vector;
using std::string;
using std::map;

//////////////////////////////////////////////////////////////////////////

namespace IOE
{
namespace Input
{

	//////////////////////////////////////////////////////////////////////////

	class IOEInputDevice;

	//////////////////////////////////////////////////////////////////////////

	interface_class IOEInputDevice_PlatformBase
	{
	public:
		IOEInputDevice_PlatformBase(IOEInputDevice & rDevice)
			: m_rDevice(rDevice)
		{
		}

		virtual void SetUp() = 0;
		virtual void Process() = 0;

	protected:
		IOEInputDevice &m_rDevice;
	};

	/////////////////////////////////////////////////////////////////////////

} // namespace Input
} // namespace IOE